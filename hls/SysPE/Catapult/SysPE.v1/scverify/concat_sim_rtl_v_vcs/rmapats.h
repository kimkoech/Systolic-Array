#ifndef __DO_RMAHDR_
#define __DO_RMAHDR_

#ifdef __cplusplus
  extern "C" {
#endif

typedef unsigned long UP;
typedef unsigned U;
typedef unsigned char UB;
typedef unsigned char scalar;
typedef struct vec32 vec32;
typedef unsigned short US;
typedef unsigned char SVAL;
typedef unsigned char TYPEB;
typedef struct qird QIRD;
typedef unsigned char UST_e;
typedef unsigned uscope_t;
typedef U  NumLibs_t;
struct vec32 {
    U  I1;
    U  I2;
};
typedef unsigned long RP;
typedef unsigned long RO;
typedef unsigned long long ULL;
typedef U  GateCount;
typedef U  NodeCount;
typedef unsigned short HsimEdge;
typedef unsigned char HsimExprChar;
typedef struct {
    U  I671;
    RP  I672;
} RmaReceiveClock1;
typedef NodeCount  FlatNodeNum;
typedef U  InstNum;
typedef unsigned long long TimeStamp64;
typedef unsigned long long TimeStamp;
typedef enum {
    PD_SING = 0,
    PD_RF = 1,
    PD_PLSE = 2,
    PD_PLSE_RF = 3,
    PD_NULL = 4
} PD_e;
typedef TimeStamp  RmaTimeStamp;
typedef TimeStamp64  RmaTimeStamp64;
typedef union {
    double I691;
    unsigned long long I692;
    unsigned  I693[2];
} rma_clock_struct;
typedef struct eblk EBLK;
typedef int (* E_fn)(void);
typedef struct eblk {
    struct eblk * I700;
    E_fn  I701;
    struct iptmpl * I702;
    unsigned I704;
    struct eblk * I705;
} eblk_struct;
typedef struct {
    RP  I700;
    RP  I701;
    RP  I702;
    unsigned I704;
    RP  I705;
} RmaEblk;
typedef union {
    double I691;
    unsigned long long I692;
    unsigned  I693[2];
} clock_struct;
typedef clock_struct  RmaClockStruct;
typedef struct RmaRetain_t RmaRetain;
struct RmaRetain_t {
    RP  I741;
    RmaEblk  I699;
    U  I742;
    US  I743 :1;
    US  I744 :4;
    US  I181 :2;
    US  state :2;
    US  I746 :1;
    US  I747 :2;
    US  I748 :2;
    US  fHsim :1;
    US  I553 :1;
    scalar  newval;
    scalar  I750;
    RP  I751;
};
typedef struct MPSched MPS;
typedef struct RmaMPSched RmaMps;
struct MPSched {
    MPS  * I731;
    scalar  I732;
    scalar  I733;
    scalar  I734;
    scalar  fHsim :1;
    scalar  I181 :6;
    U  I736;
    EBLK  I737;
    void * I738;
    UP   I739[1];
};
struct RmaMPSched {
    RP  I731;
    scalar  I732;
    scalar  I733;
    scalar  I734;
    scalar  fHsim :1;
    scalar  I181 :6;
    U  I736;
    RmaEblk  I737;
    RP  I738;
    RP   I739[1];
};
typedef struct RmaMPSchedPulse RmaMpsp;
struct RmaMPSchedPulse {
    RP  I731;
    scalar  I732;
    scalar  I733;
    scalar  I734;
    scalar  I181;
    U  I736;
    RmaEblk  I737;
    scalar  I748;
    scalar  I755;
    scalar  I756;
    scalar  I757;
    U  I758;
    RmaClockStruct  I759;
    RmaClockStruct  I760;
    U  state;
    U  I761;
    RP  I702;
    RP  I762;
    RP  I763;
    RP   I739[1];
};
typedef struct MPItem MPI;
struct MPItem {
    U  * I765;
    void * I766;
};
typedef struct {
    RmaEblk  I699;
    RP  I767;
    scalar  I768;
    scalar  I748;
    scalar  I769;
} RmaTransEventHdr;
typedef struct RmaMPSchedPulseNewCsdf RmaMpspNewCsdf;
struct RmaMPSchedPulseNewCsdf {
    RP  I731;
    scalar  I732;
    scalar  I733;
    scalar  I734;
    scalar  fHsim :1;
    scalar  I181 :6;
    U  I736;
    RmaEblk  I737;
    scalar  I748;
    scalar  I755;
    scalar  I756;
    scalar  I757;
    U  state :4;
    U  I771 :28;
    RmaClockStruct  I759;
    RmaClockStruct  I760;
    RP  I772;
    RP  I702;
    RP  I773;
    RP   I739[1];
};
typedef struct red_t {
    U  I774;
    U  I775;
    U  I654;
} RED;
typedef struct predd {
    PD_e  I181;
    RED   I776[0];
} PREDD;
union rhs_value {
    vec32  I777;
    scalar  I768;
    vec32  * I748;
    double I778;
    U  I779;
};
typedef struct nbs_t {
    struct nbs_t * I780;
    struct nbs_t * I782;
    void (* I783)(struct nbs_t * I784);
    unsigned I785 :1;
    unsigned I786 :1;
    unsigned I787 :1;
    unsigned I788 :1;
    unsigned I789 :27;
    U  I790;
    void * I791;
    union rhs_value I792;
    vec32  I691;
    union {
        struct nbs_t * first;
        struct nbs_t * last;
    } I794;
} NBS;
typedef struct {
    RP  I795;
    RP  I762;
    RP  I702;
    RP  I763;
    RmaEblk  I699;
    RmaEblk  I796;
    RP  I797;
    scalar  I768;
    scalar  I748;
    char state;
    uscope_t  I798;
    U  I799;
    RP  I800;
    scalar  I755;
    scalar  I756;
    scalar  I757;
    RmaClockStruct  I759;
    RmaClockStruct  I760;
    RP  I738;
} RmaPulse;
typedef struct {
    int * I801;
    long long I802;
} TypeData;
struct etype {
    U  I569 :8;
    U  I570 :24;
    U  I571;
    U  I572 :1;
    U  I573 :1;
    U  I574 :1;
    U  I575 :1;
    U  I576 :1;
    U  I577 :1;
    U  I578 :1;
    U  I579 :1;
    U  I580 :1;
    U  I581 :4;
    U  I582 :1;
    U  I583 :1;
    U  I584 :1;
    U  I585 :1;
    U  I586 :1;
    U  I587 :1;
    U  I588 :1;
    U  I589 :1;
    U  I590 :2;
    U  I591 :1;
    U  I592 :2;
    U  I593 :1;
    U  I594 :1;
    U  I595 :1;
    U  I596 :1;
    U  I597 :2;
    U  I598;
    TypeData  * I599;
    U  I600;
    U  I601;
    U  I602 :1;
    U  I603 :1;
    U  I604 :1;
    U  I605 :1;
    U  I606 :2;
    U  I607 :2;
    U  I608 :1;
    U  I609 :1;
    U  I610 :1;
    U  I611 :1;
    U  I612 :1;
    U  I613 :1;
    U  I614 :1;
    U  I615 :1;
    U  I616 :16;
};
typedef enum {
    QIRDModuleC = 1,
    QIRDSVPackageC = 2,
    QIRDSpiceModuleC = 3
} QIRDModuleType;
typedef struct {
    U  I806 :1;
    U  I807 :1;
    U  I808 :1;
    U  I809 :1;
    U  I810 :1;
    U  I811 :1;
    U  I812 :1;
    U  I813 :1;
    U  I814 :1;
    U  I815 :1;
    U  I816 :1;
    U  I817 :1;
    U  I818 :1;
    U  I819 :1;
    U  I820 :1;
    U  I821 :1;
    U  I822 :1;
    U  I823 :1;
    QIRDModuleType  I824 :2;
    U  I825 :1;
    U  I826 :1;
    U  I827 :1;
    U  I828 :1;
    U  I829 :1;
    U  I830 :1;
    U  I831 :1;
    U  I832 :1;
    U  I833 :1;
    U  I834 :1;
    U  I835 :1;
    U  I836 :1;
    U  I837 :1;
    U  I838 :1;
    U  I839 :1;
    U  I840 :1;
    U  I841 :1;
} BitFlags;
struct qird {
    US  I4;
    US  I5;
    U  I6;
    U  I7;
    char * I8;
    char * I9;
    U  * I10;
    char * I11;
    char * I12;
    U  I13;
    U  I14;
    struct vcd_rt * I15;
    U  I17;
    struct _vcdOffset_rt * I18;
    UP  * I20;
    U  I21;
    UP  * I22;
    U  I23;
    U  I24;
    U  I25;
    U  * I26;
    U  * I27;
    void * I28;
    void * I29;
    U  I30;
    int I31;
    UP  I32;
    U  I33;
    U  I34;
    U  I35;
    UP  I36;
    U  * I37;
    BitFlags  I38;
    U  I39;
    U  I40;
    U  I41;
    U  I42;
    U  I43;
    U  * I44;
    U  I45;
    U  * I46;
    U  I47;
    U  I48;
    U  I49;
    U  I50;
    U  I51;
    U  I52;
    U  I53;
    U  * I54;
    U  * I55;
    U  I56;
    U  I57;
    U  * I58;
    U  I59;
    U  * I60;
    U  I61;
    U  I62;
    U  I63;
    U  I64;
    U  * I65;
    U  I66;
    U  * I67;
    U  I68;
    U  I69;
    U  I70;
    U  I71;
    U  I72;
    U  I73;
    U  * I74;
    char * I75;
    U  I76;
    U  I77;
    U  I78;
    U  I79;
    U  I80;
    U  * I81;
    U  I82;
    U  I83;
    UP  * I84;
    U  I85;
    U  I86;
    UP  * I87;
    U  I88;
    U  I89;
    U  I90;
    U  I91;
    U  I92;
    U  I93;
    U  * I94;
    U  I95;
    U  I96;
    U  * I97;
    U  * I98;
    U  * I99;
    U  * I100;
    U  * I101;
    U  I102;
    U  I103;
    struct taskInfo * I104;
    U  I106;
    U  I107;
    int * I108;
    UP  * I109;
    U  * I110;
    U  I111;
    U  I112;
    U  I113;
    U  I114;
    U  I115;
    struct qrefer * I116;
    U  * I118;
    unsigned * I119;
    void * I120;
    U  I121;
    U  I122;
    struct classStaticReferData * I123;
    U  I125;
    U  * I126;
    U  I127;
    struct wakeupInfoStruct * I128;
    U  I130;
    U  I131;
    U  I132;
    U  * I133;
    U  I134;
    U  * I135;
    U  I136;
    U  I137;
    U  I138;
    U  * I139;
    U  I140;
    U  * I141;
    U  I142;
    U  I143;
    U  * I144;
    U  I145;
    U  I146;
    U  * I147;
    U  * I148;
    U  * I149;
    U  I150;
    U  I151;
    U  I152;
    U  I153;
    U  I154;
    struct qrefee * I155;
    U  * I157;
    U  I158;
    struct qdefrefee * I159;
    U  * I161;
    int (* I162)(void);
    char * I163;
    U  I164;
    U  I165;
    void * I166;
    void * I167;
    NumLibs_t  I168;
    char * I169;
    U  * I170;
    U  I171;
    U  I172;
    U  I173;
    U  I174;
    U  I175;
    U  * I176;
    U  * I177;
    int I178;
    struct clock_load * I179;
    int I194;
    struct clock_data * I195;
    int I211;
    struct clock_hiconn * I212;
    U  I216;
    int I217;
    U  I218;
    int I219;
    U  * I220;
    U  * I221;
    U  I222;
    void * I223;
    U  I224;
    U  I225;
    UP  * I226;
    void * I227;
    U  I228;
    UP  * I229;
    U  * I230;
    int (* I231)(void);
    U  * I232;
    UP  * I233;
    U  * I234;
    U  I235 :1;
    U  I236 :31;
    U  I237;
    U  I238;
    UP  * I239;
    U  * I240;
    U  I241 :1;
    U  I242 :1;
    U  I243 :1;
    U  I244 :1;
    U  I245 :28;
    U  I246;
    U  I247;
    U  I248;
    U  I249 :31;
    U  I250 :1;
    UP  * I251;
    UP  * I252;
    U  * I253;
    U  * I254;
    U  * I255;
    UP  * I256;
    UP  * I257;
    UP  * I258;
    U  * I259;
    UP  * I260;
    UP  * I261;
    UP  * I262;
    char * I263;
    U  I264;
    U  I265;
    U  I266;
    UP  * I267;
    UP  * I268;
    UP  * I269;
    UP  * I270;
    UP  * I271;
    UP  * I272;
    UP  * I273;
    UP  * I274;
    UP  * I275;
    UP  * I276;
    UP  * I277;
    UP  * I278;
    UP  * I279;
    U  * I280;
    U  * I281;
    UP  * I282;
    U  I283;
    U  I284;
    U  I285;
    U  I286;
    U  I287;
    U  I288;
    U  I289;
    U  I290;
    char * I291;
    U  * I292;
    U  I293;
    U  I294;
    U  I295;
    U  I296;
    U  I297;
    UP  * I298;
    UP  * I299;
    UP  * I300;
    UP  * I301;
    struct daidirInfo * I302;
    struct vcs_tftable * I304;
    U  I306;
    UP  * I307;
    UP  * I308;
    U  I309;
    U  I310;
    U  I311;
    UP  * I312;
    U  * I313;
    struct qird_hil_data * I314;
    UP  (* I316)(void);
    UP  (* I317)(void);
    UP  (* I318)(void);
    UP  (* I319)(void);
    UP  (* I320)(void);
    int * I321;
    int (* I322)(void);
    char * I323;
    UP  * I324;
    UP  * I325;
    UP  (* I326)(void);
    int (* I327)(void);
    int * I328;
    int (* I329)(void);
    int * I330;
    char * I331;
    U  * I332;
    U  * I333;
    U  * I334;
    U  * I335;
    void * I336;
    U  I337;
    void * I338;
    U  I339;
    U  I340;
    U  I341;
    U  I342;
    U  I343;
    U  I344;
    UP  * I345;
    U  * I346;
    U  * I347;
    U  I348 :15;
    U  I349 :14;
    U  I350 :1;
    U  I351 :1;
    U  I352 :1;
    U  I353 :3;
    U  I354 :1;
    U  I355 :1;
    U  I356 :17;
    U  I357 :3;
    U  I358 :5;
    U  I359 :2;
    U  I360 :1;
    U  I361 :31;
    struct scope * I362;
    U  I364;
    U  I365;
    U  I366;
    U  * I367;
    U  * I368;
    U  * I369;
    U  I370;
    U  I371;
    U  I372;
    struct pcbt * I373;
    U  I383;
    U  I384;
    U  I385;
    U  I386;
    void * I387;
    void * I388;
    void * I389;
    int I390;
    U  * I391;
    U  I392;
    U  I393;
    U  I394;
    U  I395;
    U  I396;
    U  I397;
    U  I398;
    void * I399;
    UP  * I400;
    U  I401;
    U  I402;
    void * I403;
    U  I404;
    void * I405;
    U  I406;
    void * I407;
    U  I408;
    int (* I409)(void);
    int (* I410)(void);
    void * I411;
    void * I412;
    void * I413;
    U  I414;
    U  I415;
    U  I416;
    U  I417;
    U  I418;
    U  I419;
    char * I420;
    U  I421;
    U  * I422;
    U  I423;
    U  * I424;
    U  I425;
    U  I426;
    U  I427;
    U  I428;
    U  I429;
    U  I430;
    U  * I431;
    U  I432;
    U  I433;
    U  * I434;
    U  I435;
    U  I436;
    U  * I437;
    char * I438;
    U  I439;
    U  I440;
    U  I441;
    U  I442;
    U  * I443;
    U  * I444;
    U  I445;
    U  * I446;
    U  * I447;
    U  I448;
    U  I449;
    U  I450;
    U  I451;
    struct cosim_info * I452;
    U  I454;
    U  * I455;
    U  I456;
    void * I457;
    U  I458;
    U  * I459;
    U  I460;
    U  * I461;
    U  I462;
    U  I463;
    U  * I464;
    U  I465;
    U  * I466;
    U  I467;
    U  * I468;
    U  I469;
    U  I470;
    U  I471;
    U  I472;
    U  I473;
    U  I474;
    U  I475;
    U  I476;
    U  I477;
    U  * I478;
    U  * I479;
    void (* I480)(void);
    U  * I481;
    UP  * I482;
    struct mhdl_outInfo * I483;
    UP  * I485;
    U  I486;
    UP  * I487;
    U  I488;
    void * I489;
    U  * I490;
    void * I491;
    char * I492;
    int (* I493)(void);
    U  * I494;
    char * I495;
    char * I496;
    U  I497;
    U  * I498;
    char * I499;
    U  I500;
    struct regInitInfo * I501;
    UP  * I503;
    U  * I504;
    char * I505;
    U  I506;
    U  I507;
    U  I508;
    U  I509;
    U  I510;
    U  I511;
    U  I512;
    U  I513;
    UP  * I514;
    U  I515;
    U  I516;
    U  I517;
    U  I518;
    UP  * I519;
    U  I520;
    UP  * I521;
    U  I522;
    U  I523;
    U  I524;
    U  * I525;
    U  I526;
    U  I527;
    U  I528;
    U  * I529;
    U  * I530;
    UP  * I531;
    UP  * I532;
    void * I533;
    UP  I534;
    void * I535;
    void * I536;
    void * I537;
    void * I538;
    void * I539;
    UP  I540;
    U  * I541;
    U  * I542;
    void * I543;
    U  I544 :1;
    U  I545 :31;
    U  I546;
    U  I547;
    U  I548;
    int I549;
    U  I550 :1;
    U  I551 :1;
    U  I552 :1;
    U  I553 :29;
    void * I554;
    void * I555;
    void * I556;
    void * I557;
    UP  * I558;
    U  * I559;
    U  I560;
    char * I561;
    U  * I562;
    U  * I563;
    char * I564;
    int * I565;
    UP  * I566;
    struct etype * I567;
    U  I617;
    U  I618;
    U  I619;
    U  * I620;
    void * I621;
    U  I622;
    U  I623;
    void * I624;
    U  I625;
    U  I626;
    U  * I627;
    U  I628;
    U  * I629;
    U  I630;
    U  I631;
    U  * I632;
};
typedef struct pcbt {
    U  * I375;
    UP  I376;
    U  I377;
    U  I378;
    U  I379;
    U  I380;
    U  I381;
    U  I382;
} PCBT;
struct iptmpl {
    QIRD  * I706;
    struct vcs_globals_t * I707;
    void * I709;
    UP  I710;
    UP  I711;
    struct iptmpl * I702[2];
};
typedef unsigned long long FileOffset;
typedef struct _hsimPeriodL {
    char  I892[256];
    struct _hsimPeriodL * I846;
} HsimPeriodL;
typedef struct {
    U   I894[2];
    U  I895 :1;
    U  I896 :1;
    U  I897 :8;
    U  I898 :8;
    U  I899 :8;
    U  I900 :4;
    unsigned long long I901;
    unsigned long long I902;
    unsigned long long I903;
    unsigned long long I904;
    unsigned long long I905;
    U  I906;
    U  I907;
    U  I908;
    U  I909;
    HsimPeriodL  * I910;
    HsimPeriodL  * I911;
    U  I912;
} HsimSignalMonitor;
typedef struct {
    FlatNodeNum  I913;
    InstNum  I914;
    U  I854;
    scalar  I915;
    UB  I916;
    UB  I917;
    UB  I918;
    UB  I919;
    U  I920;
    U  I921;
    U  I922;
    U  I923;
    U  I924;
    U  I925;
    HsimSignalMonitor  * I926;
    RP  I927;
    RmaTimeStamp64  I928;
    U  I929;
    RmaTimeStamp64  I930;
} HsimNodeRecord;
typedef struct {
    RP  I931;
    RP  I702;
} RmaIbfIp;
typedef struct {
    RP  I931;
    RP  pcode;
} RmaIbfPcode;
typedef struct {
    RmaEblk  I699;
} RmaEvTriggeredOrSyncLoadCg;
typedef struct {
    RmaEblk  I699;
    RP  I932;
} RmaAnySchedSampleSCg;
typedef struct {
    RmaEblk  I699;
    RP  I933;
    RP  I932;
    vec32  I934;
} RmaAnySchedVCg;
typedef struct {
    RmaEblk  I699;
    RP  I933;
    RP  I932;
    vec32   I747[1];
} RmaAnySchedWCg;
typedef struct {
    RmaEblk  I699;
    RP  I933;
    RP  I932;
    scalar   I935[1];
} RmaAnySchedECg;
typedef struct {
    RP  I936;
} RmaRootCbkCg;
typedef struct {
    RP  I937;
} RmaRootVcdCg;
typedef struct {
    RP  I938;
} RmaRootForceCbkCg;
typedef struct {
    RmaEblk  I699;
    RP  I939;
} RmaForceCbkJmpCg;
typedef struct {
    U  I5;
    U  I695 :30;
    U  I940 :1;
    U  I941 :1;
    vec32  I777;
    U  I942;
    RP  I943;
    RP  I944;
} RmaForceSelectorV;
typedef struct {
    U  I5;
    RmaIbfPcode  I950;
} RmaNetTypeDriverGate;
typedef struct {
    U  I5;
    U  I637;
    RmaIbfPcode   I950[1];
} RmaNetTypeScatterGate;
typedef struct {
    U  I5;
    RmaIbfPcode  I950;
} RmaNetTypeGatherGate;
typedef struct {
    RmaIbfPcode  I951;
    U  I952 :3;
    U  I953 :1;
    U  I954 :1;
    U  I955 :16;
} RmaNbaGateOfn;
typedef struct {
    NBS  I956;
    RmaIbfPcode  I951;
} RmaNbaGate1;
typedef struct {
    RP  ptable;
    RP  pfn;
    RP  pcode;
} Rma1InputGateFaninCgS;
typedef struct {
    U  I5;
    U  iinput;
    RP  I959;
} RmaCondOptLoad;
typedef struct {
    U  I5;
    U  iinput;
    RP  I959;
} RmaMacroStateUpdate;
typedef struct {
    U  I5;
    U  state;
    U  I960;
    U  * I961;
} RmaMacroState;
typedef struct {
    U  iinput;
    RP  I962;
} RmaMultiInputLogicGateCg;
typedef struct {
    U  iinput;
    RP  ptable;
    RP  I962;
} RmaSeqPrimEdgeInputCg;
typedef struct {
    RmaEblk  I699;
    RP  pcode;
} RmaSched0GateCg;
typedef struct {
    RmaEblk  I699;
    RP  pcode;
    RP  pfn;
} RmaUdpDeltaGateCg;
typedef struct {
    RmaEblk  I699;
    RP  pcode;
    RP  pfn;
    scalar  I963;
} RmaSchedDeltaGateCg;
typedef struct {
    UB  I964;
    RP  I965;
    RP  I966;
} RmaPropNodeSeqLhsSCg;
typedef struct {
    RmaEblk  I699;
    RP  pcode;
    U  I854;
    U   I688[1];
} RmaBitEdgeEblk;
typedef struct {
    U  I5;
    RP  I776;
    RmaEblk  I699;
    RmaIbfPcode  I951;
} RmaGateDelay;
typedef struct {
    U  I5;
    RP  I776;
    RmaEblk  I699;
    RmaIbfPcode  I951;
} RmaGateBehavioralDelay;
typedef struct {
    U  I5;
    union {
        RP  I1112;
        RP  I1377;
        RP  I1390;
    } I751;
    RmaIbfPcode  I951;
} RmaMPDelay;
typedef struct {
    U  I5;
    RmaPulse  I967;
    RmaIbfPcode  I951;
} RmaMPPulseHybridDelay;
typedef struct {
    U  I5;
    RmaIbfPcode  I951;
    RmaMps  I968;
} RmaMPHybridDelay;
typedef struct {
    U  I5;
    U  I969;
    RmaIbfPcode  I951;
    RmaEblk  I737;
} RmaMPHybridDelayPacked;
typedef struct {
    U  I5;
    RmaIbfPcode  I951;
    RmaMpspNewCsdf  I970;
} RmaMPPulseDelay;
typedef struct {
    U  I5;
    RmaMpsp  I970;
    RmaIbfPcode  I951;
} RmaMPPulseOptHybridDelay;
typedef struct _RmaBehavioralTransportDelay {
    U  I5;
    RP  I654;
    RmaTransEventHdr  I860;
    RP  I773;
    RmaIbfPcode  I951;
} RmaBehavioralTransportDelayS;
typedef struct {
    U  I5;
    U  I654;
    RmaTransEventHdr  I860;
    RP  I773;
    RmaIbfPcode  I951;
} RmaNtcTransDelay;
typedef struct {
    U  I5;
    U  I654;
    RmaEblk  I699;
    RmaIbfPcode  I951;
} RmaNtcTransMpwOptDelay;
typedef struct {
    U  I5;
    RmaEblk  I699;
    RmaIbfPcode  I951;
} RmaNtcTransZeroDelay;
typedef struct {
    U  I5;
    U  I971;
    U  I972;
    RmaTransEventHdr  I860;
    RP  I773;
    RmaIbfPcode  I951;
} RmaNtcTransDelayRF;
typedef struct {
    U  I5;
    U  I971;
    U  I972;
    RmaEblk  I699;
    RmaIbfPcode  I951;
} RmaNtcTransMpwOptDelayRF;
typedef struct {
    U  I5;
    RP  I973;
    RmaTransEventHdr  I860;
    RP  I773;
    RmaIbfPcode  I951;
} RmaICTransDelay;
typedef struct {
    U  I5;
    RP  I973;
    RmaEblk  I699;
    RmaIbfPcode  I951;
} RmaICTransMpwOptDelay;
typedef struct {
    U  I5;
    RmaEblk  I699;
    RmaIbfPcode  I951;
} RmaICTransZeroDelay;
typedef struct {
    U  I5;
    RP  I776;
    RmaEblk  I699;
    RmaIbfPcode  I951;
} RmaICSimpleDelay;
typedef struct {
    U  I5;
    union {
        RP  psimple;
        RP  I1377;
        RP  I1390;
    } I751;
    RmaIbfPcode  I951;
} RmaICDelay;
typedef struct {
    U  I5;
    RP  I776;
    RmaEblk  I699;
    RmaIbfPcode  I951;
} RmaPortDelay;
typedef struct {
    U  I5;
    RP   I974[(4)];
} RmaRtlXEdgesHdr;
typedef struct {
    U  I5;
    US  I975;
    US  I597;
    RP  I976;
    RP  I977;
    RP  I978;
} RmaRtlEdgeBlockHdr;
typedef struct {
    RP  I979;
    RP  I980;
} RemoteDbsedLoad;
typedef struct {
    RmaEblk  I699;
    US  I981;
    US  I597;
    U  I458;
    RP   I780[(4)];
    RP   I782[(4)];
    RemoteDbsedLoad   I982[1];
} RmaRtlEdgeBlock;
typedef struct TableAssign_ {
    struct TableAssign_ * I846;
    struct TableAssign_ * I767;
    U  I5;
    U  I984 :1;
    U  I985 :1;
    U  I986 :2;
    U  I987 :1;
    U  I671 :8;
    U  I597 :19;
    RP  ptable;
    RP  I962;
} TableAssign;
typedef struct {
    U  I5;
    RP  I767;
    RP  I988;
} RmaTableAssignList;
typedef struct {
    RP  I979;
} RmaWakeupListCg;
typedef struct {
    U  I989;
    U  I671;
    RmaTimeStamp   I990[1];
} RmaTsArray;
typedef struct {
    U  iinput;
    RP  I991;
} RmaConditionsMdb;
typedef struct {
    RP  I846;
    RP  I992;
    RP  I694;
    U  I993;
    scalar  I955;
    scalar  I994;
    US  I995 :1;
    US  I996 :1;
    US  I997 :1;
    US  I998 :1;
    US  I999 :1;
    US  I1000 :1;
    US  I1001 :5;
} RmaTcCoreSimple;
typedef struct {
    RP  I846;
    RP  I992;
    RP  I694;
    U  I993;
    scalar  I955;
    scalar  I994;
    US  I995 :1;
    US  I996 :1;
    US  I997 :1;
    US  I998 :1;
    US  I999 :1;
    US  I1000 :1;
    US  I1001 :5;
    RP  I1002;
} RmaTcCoreConditional;
typedef struct {
    RP  I846;
    RP  I992;
    RP  I694;
    U  I993;
    scalar  I955;
    scalar  I994;
    US  I995 :1;
    US  I996 :1;
    US  I997 :1;
    US  I998 :1;
    US  I999 :1;
    US  I1000 :1;
    US  I1001 :5;
    RP  I1002;
    RP  I1003;
} RmaTcCoreConditionalOpt;
typedef struct {
    RP  I846;
    RP  I992;
    RP  I694;
    U  I993;
    scalar  I955;
    scalar  I994;
    US  I995 :1;
    US  I996 :1;
    US  I997 :1;
    US  I998 :1;
    US  I999 :1;
    US  I1000 :1;
    US  I1001 :5;
    RP  I1003;
    RP  I1004;
    U  I1005;
    RmaConditionsMdb   arr[1];
} RmaTcCoreConditionalMtc;
typedef struct {
    RP  I992;
    RP  I694;
    U  I993;
    scalar  I955;
    scalar  I994;
    US  I995 :1;
    US  I996 :1;
    US  I997 :1;
    US  I998 :1;
    US  I999 :1;
    US  I1000 :1;
    US  I1001 :5;
} RmaTcCoreSimpleNoList;
typedef struct {
    RP  I992;
    RP  I694;
    U  I993;
    scalar  I955;
    scalar  I994;
    US  I995 :1;
    US  I996 :1;
    US  I997 :1;
    US  I998 :1;
    US  I999 :1;
    US  I1000 :1;
    US  I1001 :5;
    RP  I1007;
} RmaTcCoreSimpleNoListMdb;
typedef struct {
    RP  I992;
    RP  I694;
    U  I993;
    scalar  I955;
    scalar  I994;
    US  I995 :1;
    US  I996 :1;
    US  I997 :1;
    US  I998 :1;
    US  I999 :1;
    US  I1000 :1;
    US  I1001 :5;
    RP  I1002;
} RmaTcCoreConditionalNoList;
typedef struct {
    RP  I992;
    RP  I694;
    U  I993;
    scalar  I955;
    scalar  I994;
    US  I995 :1;
    US  I996 :1;
    US  I997 :1;
    US  I998 :1;
    US  I999 :1;
    US  I1000 :1;
    US  I1001 :5;
    RP  I1002;
    RP  I1003;
} RmaTcCoreConditionalOptNoList;
typedef struct {
    RP  I992;
    RP  I694;
    U  I993;
    scalar  I955;
    scalar  I994;
    US  I995 :1;
    US  I996 :1;
    US  I997 :1;
    US  I998 :1;
    US  I999 :1;
    US  I1000 :1;
    US  I1001 :5;
    RP  I1003;
    RP  I1004;
    U  I1005;
    RmaConditionsMdb   arr[1];
} RmaTcCoreConditionalMtcNoList;
typedef struct {
    RP  I992;
    RP  I694;
    U  I993;
    scalar  I955;
    scalar  I994;
    US  I995 :1;
    US  I996 :1;
    US  I997 :1;
    US  I998 :1;
    US  I999 :1;
    US  I1000 :1;
    US  I1001 :5;
    RP  I1003;
    RP  I1004;
    RP  I1007;
    U  I1005;
    RmaConditionsMdb   arr[1];
} RmaTcCoreConditionalMtcNoListMdb;
typedef struct {
    RP  I992;
    RP  I694;
    U  I993;
    scalar  I955;
    scalar  I994;
    US  I995 :1;
    US  I996 :1;
    US  I997 :1;
    US  I998 :1;
    US  I999 :1;
    US  I1000 :1;
    US  I1001 :5;
    RP  I1002;
    RP  I1007;
} RmaTcCoreConditionalNoListMdb;
typedef struct {
    RP  I992;
    RP  I694;
    U  I993;
    scalar  I955;
    scalar  I994;
    US  I995 :1;
    US  I996 :1;
    US  I997 :1;
    US  I998 :1;
    US  I999 :1;
    US  I1000 :1;
    US  I1001 :5;
    U  I1008;
    RP  I1009;
    RP  I1010;
    RP  I1002;
    RP  I1011;
    RP  I1012;
    RmaTimeStamp  I1013;
} RmaTcCoreNochange;
typedef struct {
    RP  I1014;
    RP  I846;
} RmaTcCoreNochangeList;
typedef struct {
    RP  I991;
    RmaTimeStamp  I1015;
    scalar  I1016;
} RmaConditionalTSLoadNoList;
typedef struct {
    RP  I846;
    RP  I991;
    RmaTimeStamp  I1015;
    scalar  I1016;
} RmaConditionalTSLoad;
typedef struct {
    RmaTimeStamp  I1015;
    scalar  I1016;
    US  I955;
    RP  I1003;
} RmaConditionalTSLoadOptNoList;
typedef struct {
    RP  I846;
    RmaTimeStamp  I1015;
    scalar  I1016;
    US  I955;
    RP  I1003;
} RmaConditionalTSLoadOpt;
typedef struct {
    RP  I1003;
    RP  I1017;
    U  I1005;
    RmaConditionsMdb   arr[1];
} RmaConditionalTSLoadMtcNoList;
typedef struct {
    RP  I1007;
    RP  I1003;
    RP  I1017;
    U  I1005;
    RmaConditionsMdb   arr[1];
} RmaConditionalTSLoadMtcNoListMdb;
typedef struct {
    RP  I846;
    RP  I1003;
    RP  I1017;
    U  I1005;
    RmaConditionsMdb   arr[1];
} RmaConditionalTSLoadMtc;
typedef struct {
    U  I1018;
    U  I1019;
    FlatNodeNum  I1020;
    U  I854;
    U  I1021;
    U  I1022;
    RmaIbfPcode  I951;
    union {
        scalar  I1023;
        vec32  I1024;
        scalar  * I1025;
        vec32  * I1026;
    } val;
} RmaScanSwitchData;
typedef struct {
    RP  I846;
    RP  I767;
    RP  I1027;
} RmaDoublyLinkedListElem;
typedef struct {
    RP  I1028;
    U  I1029 :1;
    U  I1030 :1;
    U  I1031 :1;
    U  I1032 :4;
    U  I597 :25;
    U  I1033;
} RmaSwitchGateInCbkListInfo;
typedef struct {
    union {
        RmaDoublyLinkedListElem  I1426;
        RmaSwitchGateInCbkListInfo  I2;
    } I668;
    RmaIbfPcode  I951;
} RmaSwitchGate;
typedef struct RmaNonEdgeLoadData1_ {
    US  I1034;
    scalar  val;
    scalar  I181 :4;
    scalar  I1035 :1;
    scalar  I1036 :1;
    scalar  I1037 :1;
    scalar  I1038 :1;
    RP  I780;
    RP  I1039;
    RP  I1020;
    RP  I1040;
    RP  I1041;
} RmaNonEdgeLoadData1;
typedef struct RmaNonEdgeLoadHdr1_ {
    UB  I1042;
    UB  I1043;
    RmaNonEdgeLoadData1  * I974;
    RmaNonEdgeLoadData1  * I767;
} RmaNonEdgeLoadHdr1;
typedef struct RmaSubMasterSeqUdpLoad_ {
    RmaTableAssignList  * I1044;
    struct RmaSubMasterSeqUdpLoad_ * I1027;
    struct RmaSubMasterSeqUdpLoad_ * I846;
} RmaSubMasterSeqUdpLoad;
typedef struct RmaSubMasterSeqUdpList_ {
    RmaTableAssignList  * I1044;
    RmaSubMasterSeqUdpLoad  * I974;
    RmaSubMasterSeqUdpLoad  * I767;
} RmaSubMasterSeqUdpList;
typedef struct RmaChildClockProp_ {
    RP  I780;
    RP  I1046;
    RP  I1020;
    RP  pcode;
    scalar  val;
} RmaChildClockProp;
typedef struct RmaChildClockPropList1_ {
    RmaChildClockProp  * I974;
    RmaChildClockProp  * I767;
} RmaChildClockPropList1;
typedef struct {
    U  I5;
    U  I1047;
} RmaHDLCosimDUTGate;
struct clock_load {
    U  I181 :5;
    U  I182 :12;
    U  I183 :1;
    U  I184 :2;
    U  I185 :1;
    U  I186 :1;
    U  I187 :1;
    U  I188 :9;
    U  I189;
    U  I190;
    void (* pfn)(void * I192, char val);
};
typedef struct clock_data {
    U  I197 :1;
    U  I198 :1;
    U  I199 :1;
    U  I200 :1;
    U  I181 :5;
    U  I182 :12;
    U  I201 :6;
    U  I202 :1;
    U  I184 :2;
    U  I185 :1;
    U  I188 :1;
    U  I203;
    U  I204;
    U  I205;
    U  I189;
    U  I206;
    U  I207;
    U  I208;
    U  I209;
    U  I210;
} HdbsClockData;
struct clock_hiconn {
    U  I214;
    U  I215;
    U  I189;
    U  I184;
};
typedef struct _RmaDaiCg {
    RP  I1048;
    RP  I1049;
    U  I1050;
} RmaDaiCg;
typedef union _RmaCbkMemOptUnion {
    RP  I1048;
    RP  I1051;
    RP  I1052;
} RmaCbkMemOptUnion;
typedef struct _RmaDaiOptCg {
    RmaCbkMemOptUnion  I1053;
} RmaDaiOptCg;
struct futq_slot2 {
    U  I729;
    U   I730[32];
};
struct futq_slot1 {
    U  I726;
    struct futq_slot2  I727[32];
};
struct futq_info {
    U  I722;
    U  I723;
    struct futq_slot1  I724[32];
};
struct futq {
    struct futq * I712;
    struct futq * I714;
    RmaEblk  * I715;
    RmaEblk  * I716;
    U  I704;
};
struct sched_table {
    struct futq * I717;
    struct futq I718;
    struct hash_bucket * I719;
    struct hash_bucket * I721;
};
struct dummyq_struct {
    clock_struct  I1057;
    EBLK  * I1058;
    EBLK  * I1059;
    struct futq * I1060;
    struct futq * I1061;
    struct futq * I1062;
    struct sched_table * I1063;
    struct futq_info * I1065;
    U  I1067;
    U  I1068;
    U  I1069;
    struct millenium * I1070;
    EBLK  * I1072;
    EBLK  * I1073;
    EBLK  * I1074;
    EBLK  * I1075;
    EBLK  * I1076;
    EBLK  * I1077;
    EBLK  * I1078;
    EBLK  * I1079;
    EBLK  * I1080;
    EBLK  * I1081;
    EBLK  * I1082;
    EBLK  * I1083;
    EBLK  * I1084;
    EBLK  * I1085;
    EBLK  * I1086;
    EBLK  * I1087;
    EBLK  * I1088;
    EBLK  * I1089;
    MPS  * I1090;
};
typedef void (* FP)(void *  , scalar   );
typedef void (* FP1)(void *  );
typedef void (* FPRAP)(void *  , vec32  *  , U   );
typedef U  (* FPU1)(void *  );
typedef void (* FPV)(void *  , UB  *  );
typedef void (* FPVU)(void *  , UB  *  , U   );
typedef void (* FPLSEL)(void *  , scalar   , U   );
typedef void (* FPLSELV)(void *  , vec32  *  , U   , U   );
typedef void (* FPFPV)(UB  *  , UB  *  , U   , U   , U   , U   , U   , UB  *  , U   );
typedef void (* FPFA)(UB  *  , UB  *  , U   , U   , U   , U   , U   , U   , UB  *  , U   );
typedef void (* FPRPV)(UB  *  , U   , U   , U   );
typedef void (* FPEVCDLSEL)(void *  , scalar   , U   , UB  *  );
typedef void (* FPEVCDLSELV)(void *  , vec32  *  , U   , U   , UB  *  );
typedef void (* FPNTYPE_L)(void *  , void *  , U   , U   , UB  *  , UB  *  , UB  *  , UB  *  , UB  *  , UB  *  , UB  *  , U   );
typedef void (* FPNTYPE_H)(void *  , void *  , U   , U   , UB  *  , UB  *  , UB  *  , UB  *  , U   );
typedef void (* FPNTYPE_LPAP)(void *  , void *  , void *  , U   , U   , UB  *  , UB  *  , U   );
typedef void (* FPNTYPE_HPAP)(void *  , void *  , void *  , U   , U   , UB  *  , UB  *  , UB  *  , UB  *  , U   );
typedef struct _lqueue {
    EBLK  * I700;
    EBLK  * I1091;
    int I1092;
    struct _lqueue * I741;
} Queue;
typedef struct {
    EBLK  I1094;
    U  I1095;
    union {
        void * pHeap;
        Queue  * pList;
    } I668;
    Queue   I1096[1];
} Qhdr;
extern UB   Xvalchg[];
extern UB   X4val[];
extern UB   X3val[];
extern UB   X2val[];
extern UB   XcvtstrTR[];
extern UB   Xcvtstr[];
extern UB   Xbuf[];
extern UB   Xbitnot[];
extern UB   Xwor[];
extern UB   Xwand[];
extern U   Xbitnot4val[];
extern UB   globalTable1Input[];
extern unsigned long long vcs_clocks;
extern UB   Xunion[];
extern U  fRTFrcRelCbk;
extern FP  txpFnPtr;
extern FP   rmaFunctionArray[];
extern FP   rmaFunctionRtlArray[];
extern FP   rmaFunctionLRArray[];
extern U  rmaFunctionCount;
extern U  rmaFunctionLRCount;
extern U  rmaFunctionLRDummyCount;
extern UP  rmaFunctionDummyEndPtr;
extern UB  dummyScalar;
extern UB  fScalarIsForced;
extern UB  fScalarIsReleased;
extern U  fNotimingchecks;
extern RP  * iparr;
extern FP1  * rmaPostAnySchedFnPtr;
extern FP1  * rmaPostAnySchedFnSamplePtr;
extern FP1  * rmaPostAnySchedVFnPtr;
extern FP1  * rmaPostAnySchedWFnPtr;
extern FP1  * rmaPostAnySchedEFnPtr;
extern FP1  * rmaPostSchedUpdateClockStatusFnPtr;
extern FP1  * rmaPostSchedUpdateClockStatusNonCongruentFnPtr;
extern FP1  * rmaPostSchedUpdateEvTrigFnPtr;
extern FP1  * rmaSched0UpdateEvTrigFnPtr;
extern FP1  * rmaPostSchedRecoveryResetDbsFnPtr;
extern U  fGblDataOrTime0Prop;
extern UB   rmaEdgeStatusValArr[];
extern FP1  * propForceCbkSPostSchedCgFnPtr;
extern FP1  * propForceCbkMemoptSPostSchedCgFnPtr;
extern UB  * ptableGbl;
extern UB  * expandedClkValues;
extern US   xedges[];
extern Qhdr  * lvlQueue;
extern U  mhdl_delta_count;
extern U  ignoreSchedForScanOpt;
extern U  fignoreSchedForDeadComboCloud;
extern int fZeroUser;
extern U  fEveBusPullVal;
extern U  fEveBusPullFlag;
extern UB  fNettypeIsForced;
extern UB  fNettypeIsReleased;
extern EBLK  * peblkFutQ1Head;
extern EBLK  * peblkFutQ1Tail;
extern US  * edgeActionT;
extern unsigned long long * derivedClk;
extern U  fHashTableSize;
extern U  fSkipStrChangeOnDelay;
extern U  fLoopDetectMode;
extern int gFLoopDectCodeEna;
extern U  fLoopReportRT;


extern void *mempcpy(void* s1, void* s2, unsigned n);
extern UB* rmaEvalDelays(UB* pcode, scalar val);
extern UB* rmaEvalDelaysV(UB* pcode, vec32* pval);
extern void rmaPopTransEvent(UB* pcode);
extern void rmaSetupFuncArray(UP* ra, U c, U w);
extern void rmaSetupRTLoopReportPtrs(UP* funcs, UP* rtlFuncs, U cnt, U cntDummy, UP end);
extern void SinitHsimPats(void);
extern void VVrpDaicb(void* ip, U nIndex);
extern int SDaicb(void *ip, U nIndex);
extern void SDaicbForHsimNoFlagScalar(void* pDaiCb, unsigned char value);
extern void SDaicbForHsimNoFlagStrengthScalar(void* pDaiCb, unsigned char value);
extern void SDaicbForHsimNoFlag(void* pRmaDaiCg, unsigned char value);
extern void SDaicbForHsimNoFlag2(void* pRmaDaiCg, unsigned char value);
extern void SDaicbForHsimWithFlag(void* pRmaDaiCg, unsigned char value);
extern void SDaicbForHsimNoFlagFrcRel(void* pRmaDaiCg, unsigned char reason, int msb, int lsb, int ndx);
extern void SDaicbForHsimNoFlagFrcRel2(void* pRmaDaiCg, unsigned char reason, int msb, int lsb, int ndx);
extern void VcsHsimValueChangeCB(void* pRmaDaiCg, void* pValue, unsigned int valueFormat);
extern U isNonDesignNodeCallbackList(void* pRmaDaiCg);
extern void SDaicbForHsimCbkMemOptNoFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptWithFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptNoFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptWithFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void VVrpNonEventNonRegdScalarForHsimOptCbkMemopt(void* ip, U nIndex);
extern void SDaicbForHsimCbkMemOptNoFlagDynElabScalar(U* mem, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptWithFlagDynElabScalar(U* mem, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptNoFlagDynElabFrcRel(U* mem, unsigned char reason, int msb, int lsb, int ndx);
extern void SDaicbForHsimCbkMemOptNoFlagFrcRel(void* pDaiCb, unsigned char reason, int msb, int lsb, int ndx);
extern void hsimDispatchCbkMemOptForVcd(RP p, U val);
extern void* hsimGetCbkMemOptCallback(RP p);
extern void hsimDispatchCbkMemOptNoDynElabS(RP* p, U val, U isStrength);
extern void* hsimGetCbkPtrNoDynElab(RP p);
extern void hsimDispatchCbkMemOptDynElabS(U** pvcdarr, U** pcbkarr, U val, U isScalForced, U isScalReleased, U isStrength);
extern void hsimDispatchCbkMemOptNoDynElabVector(RP* /*RmaDaiOptCg* */p, void* pval, U /*RmaValueType*/ vt, U cbits);
extern void copyAndPropRootCbkCgS(RmaRootCbkCg* pRootCbk, scalar val);
extern void copyAndPropRootCbkCgV(RmaRootCbkCg* rootCbk, vec32* pval);
extern void copyAndPropRootCbkCgW(RmaRootCbkCg* rootCbk, vec32* pval);
extern void copyAndPropRootCbkCgE(RmaRootCbkCg* rootCbk, scalar* pval);
extern void dumpRootVcdCg(RmaRootVcdCg* pRootVcd, scalar val);
extern void Wsvvar_callback_non_dynamic1(RP* ptr, int);
extern void rmaExecEvSyncList(RP plist);
extern void Wsvvar_callback_virt_intf(RP* ptr);
extern void Wsvvar_callback_hsim_var(RP* ptr);
extern void checkAndConvertVec32To2State(vec32* value, vec32* svalue, U cbits, U* pforcedBits);
extern unsigned int fGblDataOrTime0Prop;
extern void SchedSemiLerMP1(UB* pmps, U partId);
extern void SchedSemiLerMPO(UB* pmpso, U partId);
extern void rmaDummyPropagate(void);
extern RP rmaTestCg(RP pcode, U vt, UB* value);
extern void hsUpdateModpathTimeStamp(UB* pmps);
extern void doMpd32One(UB* pmps);
extern void doMpdCommon(MPS* pmps);
extern TimeStamp GET_DIFF_DELAY_FUNC(TimeStamp ts);
extern void SchedSemiLerMP(UB* ppulse, U partId);
extern EBLK *peblkFutQ1Head;
extern EBLK *peblkFutQ1Tail;
extern void scheduleuna(UB *e, U t);
extern void scheduleuna_mp(EBLK *e, unsigned t);
extern void schedule(UB *e, U t);
extern void sched_hsopt(struct dummyq_struct * pQ, EBLK *e, U t);
extern void sched_millenium(struct dummyq_struct * pQ, void *e, U thigh, U t);
extern void schedule_1(EBLK *e);
extern void sched0(UB *e);
extern void sched0Raptor(UB *e);
extern void sched0lq(UB *e);
extern void sched0lqnc(EBLK *e);
extern void sched0una(UB *e);
extern void sched0una_th(struct dummyq_struct *pq, UB *e);
extern void hsopt_sched0u_th(struct dummyq_struct *pq, UB *e);
extern void scheduleuna_mp_th(struct dummyq_struct *pq, EBLK *e, unsigned t);
extern void schedal(UB *e);
extern void sched0_th(struct dummyq_struct * pQ, EBLK *e);
extern void sched0u(UB *e);
extern void sched0u_th(struct dummyq_struct *pq, UB *e);
extern void sched0_hsim_front_th(struct dummyq_struct * pQ, UB *e);
extern void sched0_hsim_frontlq_th(struct dummyq_struct * pQ, UB *e);
extern void sched0lq_th(struct dummyq_struct * pQ, UB *e);
extern void schedal_th(struct dummyq_struct * pQ, UB *e);
extern void scheduleuna_th(struct dummyq_struct * pQ, void *e, U t);
extern void schedule_th(struct dummyq_struct * pQ, UB *e, U t);
extern void schedule_1_th(struct dummyq_struct * pQ, EBLK *peblk);
extern void SetupLER_th(struct dummyq_struct * pQ, EBLK *e);
extern void FsdbReportClkGlitch(UB*,U);
extern void SchedSemiLer_th(struct dummyq_struct * pQ, EBLK *e);
extern void SchedSemiLerTXP_th(struct dummyq_struct * pQ, EBLK *e);
extern void SchedSemiLerTXPFreeVar_th(struct dummyq_struct * pQ, EBLK *e);
extern U getVcdFlags(UB *ip);
extern void VVrpNonEventNonRegdScalarForHsimOpt(void* ip, U nIndex);
extern void VVrpNonEventNonRegdScalarForHsimOpt2(void* ip, U nIndex);
extern void SchedSemiLerTBReactiveRegion(struct eblk* peblk);
extern void SchedSemiLerTBReactiveRegion_th(struct eblk* peblk, U partId);
extern void SchedSemiLerTr(UB* peblk, U partId);
extern void SchedSemiLerNBA(UB* peblk, U partId);
extern void NBA_Semiler(void *ip, void *pNBS);
extern void sched0sd_hsim(UB* peblk);
extern void appendNtcEvent(UB* phdr, scalar s, U schedDelta);
extern void appendTransEventS(RmaTransEventHdr* phdr, scalar s, U schedDelta);
extern void schedRetainHsim(MPS* pMPS, scalar sv, scalar pv);
extern void updateRetainHsim(MPS* pMPS,scalar sv, scalar pv);
extern void hsimRegisterEdge(void* sm,  scalar s);
extern U pvcsGetPartId();
extern void HsimPVCSPartIdCheck(U instNo);
extern void debug_func(U partId, struct dummyq_struct* pQ, EBLK* EblkLastEventx); 
extern struct dummyq_struct* pvcsGetQ(U thid);
extern EBLK* pvcsGetLastEventEblk(U thid);
extern void insertTransEvent(RmaTransEventHdr* phdr, scalar s, scalar pv, scalar resval, U schedDelta, int re, UB* predd, U fpdd);
extern void insertNtcEventRF(RmaTransEventHdr* phdr, scalar s, scalar pv, scalar resval, U schedDelta, U* delays);
extern U doTimingViolation(RmaTimeStamp ts,RP* pdata, U fskew, U limit, U floaded, U fcondopt, RmaTimeStamp tsNochange);
extern void sched_gate_hsim(EBLK* peblk, unsigned t, RP* offset);
extern int getCurSchedRegion();
extern FP getRoutPtr(RP, U);
extern U rmaChangeCheckAndUpdateE(scalar* pvalDst, scalar* pvalSrc, U cbits);
extern void rmaUpdateE(scalar* pvalDst, scalar* pvalSrc, U cbits);
extern U rmaChangeCheckAndUpdateEFromW(scalar* pvalDst, vec32* pvalSrc, U cbits);
extern void rmaLhsPartSelUpdateE(scalar* pvalDst, scalar* pvalSrc, U index, U width);
extern void rmaUpdateWithForceSelectorE(scalar* pvalDst, scalar* pvalSrc, U cbits, U* pforceSelector);
extern void rmaUpdateWFromE(vec32* pvalDst, scalar* pvalSrc, U cbits);
extern U rmaLhsPartSelWithChangeCheckE(scalar* pvalDst, scalar* pvalSrc, U index, U width);
extern void rmaLhsPartSelWFromE(vec32* pvalDst, scalar* pvalSrc, U index,U width);
extern U rmaChangeCheckAndUpdateW(vec32* pvalDst, vec32* pvalSrc, U cbits);
extern void rmaUpdateW(vec32* pvalDst, vec32* pvalSrc, U cbits);
extern void rmaUpdateEFromW(scalar* pvalDst, vec32* pvalSrc, U cbits);
extern U rmaLhsPartSelWithChangeCheckW(vec32* pvalDst, vec32* pvalSrc, U index,U width);
extern void rmaLhsPartSelEFromW(scalar* pvalDst, vec32* pvalSrc, U index,U width);
extern U rmaLhsPartSelWithChangeCheckEFromW(scalar* pvalDst, vec32* pvalSrc, U index,U width);
extern void rmaLhsPartSelUpdateW(vec32* pvalDst, vec32* pvalSrc, U index, U width);
extern void rmaEvalWunionW(vec32* dst, vec32* src, U cbits, U count);
extern void rmaEvalWorW(vec32* dst, vec32* src, U cbits, U count);
extern void rmaEvalWandW(vec32* dst, vec32* src, U cbits, U count);
extern void rmaEvalUnionE(scalar* dst, scalar* src, U cbits, U count, RP ptable);
typedef U RmaCgFunctionType;
extern RmaIbfPcode* rmaEvalPartSelectsW(vec32* pvec32, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce);
extern RmaIbfPcode* rmaEvalPartSelectsWLe32(vec32* pvec32, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce);
extern RmaIbfPcode* rmaEvalPartSelectsWToE(vec32* pvec32, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce);
extern RmaIbfPcode* rmaEvalPartSelectsEToE(scalar* pv, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce, UB* pevcdStatus);
extern RmaIbfPcode* rmaEvalPartSelectsEToW(scalar* pv, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce);
extern U rmaEvalBitPosEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitNegEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitChangeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U VcsForceVecVCg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U/*RmaValueConvType*/ convtype, U/*RmaForceType*/ frcType, UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsReleaseVecVCg(UB* pcode, UB* pvDst, U fullcbits, U ibeginDst, U width, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsForceVecWCg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U/*RmaValueConvType*/ convtype, U /*RmaForceType*/ frcType, UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsReleaseVecWCg(UB* pcode, UB* pvDst, U fullcbits, U ibeginDst, U width, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsForceVecECg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U /*RmaValueConvType*/ convtype, U /*RmaForceType*/ frcType,UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsForceVecACg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U /*RmaValueConvType*/ convtype, U /*RmaForceType*/ frcType,UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsReleaseVecCg(UB* pcode, UB* pvDst, U ibeginDst, U width, U /*RmaValueType*/ type,U fisRoot, UB* prhsDst, U frhs, U* pforcedbits);
extern U VcsDriveBitsAndDoChangeCheckV(vec32* pvSel, vec32* pvCur, U fullcbits, U* pforcedbits, U isRoot);
extern U VcsDriveBitsAndDoChangeCheckW(vec32* pvSel, vec32* pvCur, U fullcbits, U* pforcedbits, U isRoot);
extern U VcsDriveBitsAndDoChangeCheckE(scalar* pvSel, scalar* pvCur, U fullcbits, U* pforcedbits, U isRoot);
extern void cgvecDebug_Eblk(UB* pcode);
extern U rmaCmpW(vec32* pvalDst, vec32* pvalSrc, U index, U width);
extern void copyVec32ArrMask(vec32* pv1, vec32* pv2, U len, U* mask);
extern void* memcpy(void*, const void*, size_t);
extern int memcmp(const void*, const void*, size_t);
extern void propagateScanOptPathVal(EBLK *peblk);
extern UB* rmaProcessScanSwitches(UB* pcode, scalar val);
extern UB* rmaProcessScanSwitchesV(UB* pcode, vec32 *pval);
extern UB* rmaProcessScanoptDump(UB* pcode, scalar val);
extern UB* rmaProcessScanoptDumpV(UB* pcode, vec32 *pval);
extern UB* rmaProcessScanChainOptSeqPrims(UB* pcode, scalar val);
extern void rmaProcessPvcsCcn(UB* pcode, scalar val);
extern void rmaProcessPvcsCcnE(UB* pcode, scalar* val);
extern void rmaProcessPvcsCcnW(UB* pcode, vec32* val);
extern void rmaProcessPvcsCcnV(UB* pcode, vec32* val);
extern void rmaProcessPvcsCcnCompiledS(UB* pcode, U offset, scalar ibnval);
extern void rmaProcessPvcsCcnCompiledV(UB* pcode, U offset, vec32* pval);
extern void schedResetRecoveryDbs(U cedges, EBLK* peblkFirst);
extern UB* rmaEvalUnaryOpV(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpV(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpVOneFanoutCount(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpVLargeFanoutCount(UB* pcode, vec32* pval);
extern UB* rmaEvalAndOpVOneFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalAndOpVLargeFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalAndOpV(UB* pcode, vec32* value);
extern UB* rmaEvalOrOpVOneFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalOrOpVLargeFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalOrOpV(UB* pcode, vec32* value);
extern UB* rmaEvalTernaryOpV(UB* pcode, vec32* pval);
extern UB* rmaEvalUnaryOpW(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpW(UB* pcode, vec32* pval);
extern UB* rmaEvalTernaryOpW(UB* pcode, vec32* pval);
extern UB* rmaEvalUnaryOpE(UB* pcode, scalar* pv);
extern UB* rmaEvalBinaryOpE(UB* pcode, scalar* pv);
extern UB* rmaEvalTernaryOpE(UB* pcode, scalar* pv);
extern UB* rmaEvalTernaryOpS(UB* pcode, scalar val);
extern scalar rmaGetScalarFromWCg(vec32* pval, U index);
extern void rmaSetScalarInWCg(vec32* pval, U index, scalar s);
extern void rmaCountRaptorBits(void* pval, void* pvalPrev, U cbits, U vt);
extern void setHsimFunc(void* ip);
extern void unsetHsimFunc(void* ip);
extern UB* getEvcdStatusByFlagsE(scalar* pscalar, UB* pevcdTBDriverFlags, U cdrivers, UB* table, U cbits);
extern UB* getEvcdStatusByFlagsV(vec32* pvec32, UB* pevcdTBDriverFlags, U cdrivers, UB* table, U cbits);
extern UB* getEvcdStatusByFlagsS(scalar* pscalar, UB* pevcdTBDriverFlags, U cdrivers, UB* table);
extern UB* getSingleDrvEvcdStatusS(UB value, U fTBDriver);
extern UB* getSingleDrvEvcdStatusE(scalar* pscalars, U fTBDriver, U cbits);
extern UB* getSingleDrvEvcdStatusV(scalar* pscalars, U fTBDriver, U cbits);
extern UB* getEvcdStatusByDrvEvcdStatus(UB* pdrvevcdStatus, U cdrivers, UB* table, U cbits);
extern void evcdCallback(UP pcode, U cbits);
extern UB* getSavedEvcdStatus(void);
extern void saveEvcdStatus(UB*);
extern void mhdlMarkExport(void*, U);
extern void levelInsertQueue(int);
extern void VcsRciRtl(RP pcode);
extern U fLoopDetectMode;
extern int gFLoopDectCodeEna;
extern U fLoopReportRT;
extern void rtSched0LoopDectDumpProcess(void* e, void* rtn, void* PQ);
extern void pushHsimRtnCtxt(void* pcode);
extern void popHsimRtnCtxt();
extern EBLK* loopReportInlinedSched0Wrapper(EBLK *peblk);
extern void loopReportSched0Wrapper(EBLK *peblk, unsigned int sfType, unsigned int fTH, struct dummyq_struct* pq);
extern void loopReportSchedSemiLerWrapper(EBLK *peblk, int sfType);
extern void CallGraphPushNodeAndAddToGraph(UP flatNode, UP instNum, U dummy);
extern void CallGraphPopNode(void);
extern RP elabGetIpTpl(U in);
extern U rmaEvalBitBothEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ1W(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQXW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ0W(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval01EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval0XEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval10EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval1XEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalX1EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalX0EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitPosEdgeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitNegEdgeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitBothEdgeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ1E(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ0E(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitChangeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern void rmaScheduleNbaGate(RP pcode, scalar val);
extern void rmaEvalRtlEdgeLoads(RmaRtlEdgeBlockHdr *phdr, US clkEdge, scalar clkVal, scalar prevClkVal, scalar val4,   scalar prevval4);
extern void rmaEvaluateDynamicGateLoadsCg(RP p, scalar s);
extern void rmaEvaluateFusedWithDynamicGateLoadsCg(RP p, scalar s);
extern void rmaScheduleGatedClockEdgeLoad(UB* p, US* ea, U fNonEdgeLoad, UB* plist, UB* pprevlist, scalar v);
extern void rmaRemoveNonEdgeLoads(UB* pcode);
extern void rmaRecordEvents(HsimNodeRecord *pnr);
extern void handlePCBs(UB* p, U i);
extern void markMasterClkOvaLists(U fdbs, RP p);
extern void rmaChildClockPropAfterWrite(UB* p);
extern void rmaSchedChildClockPropAfterWrite(UB* p, UB* pmasterList, UB val);
extern void HDLCosimProcessDUTInputChange(U inputId, void* val);
extern void rmaChangeListForMovedGates(UB clkVal, UB f10Edge, UB* subMasterVal, UB* plist, RP* p, U count);
extern U rmaIsS2State(scalar s);
extern U rmaIsV2State(vec32* pval, U cbits);
extern U rmaIsW2State(vec32* pval, U cbits);
extern U rmaIsE2State(scalar* pval, U cbits);
extern void rmaUpdateRecordFor2State(HsimNodeRecord* record, U f2state);
typedef void (*FuncPtr)();
static inline U asm_bsf (U in)
{
#if defined(linux)
    U out;
    asm ("movl %1, %%eax; bsf %%eax, %%eax; movl %%eax, %0;"
        :"=r"(out)
        :"r"(in)
        :"%eax"
        );
    return out;
#else
    return 0;
#endif
}


#ifdef __cplusplus
extern "C" {
#endif
void  hsG_0 (struct dummyq_struct * I1104, EBLK  * I1105, U  I654);
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
  }
#endif
#endif /*__DO_RMAHDR_*/

