// ----------------------------------------------------------------------------
// SystemC SCVerify Flow -- sysc_sim_trans.cpp
//
//    HLS version: 10.4b/841621 Production Release
//       HLS date: Thu Oct 24 17:20:07 PDT 2019
//  Flow Packages: HDL_Tcl 8.0a, SCVerify 10.4
//
//   Generated by: billyk@cad.eecs.harvard.edu
// Generated date: Fri Apr 17 21:42:14 EDT 2020
//
// ----------------------------------------------------------------------------
// 
// -------------------------------------
// sysc_sim_wrapper
// Represents a new SC_MODULE having the same interface as the original model SysPE_rtl
// -------------------------------------
// 

#ifndef TO_QUOTED_STRING
#define TO_QUOTED_STRING(x) TO_QUOTED_STRING1(x)
#define TO_QUOTED_STRING1(x) #x
#endif
// Hold time for the SCVerify testbench to account for the gate delay after downstream synthesis in pico second(s)
// Hold time value is obtained from 'top_gate_constraints.cpp', which is generated at the end of RTL synthesis
#ifdef CCS_DUT_GATE
extern double __scv_hold_time;
#else
double __scv_hold_time = 0.0; // default for non-gate simulation is zero
#endif


#ifndef SC_USE_STD_STRING
#define SC_USE_STD_STRING
#endif

#include "../../../../../cmod/lab3/SysPE/SysPE.h"
#include <systemc.h>
#include <mc_scverify.h>
#include <mt19937ar.c>
#include "mc_dut_wrapper.h"


namespace CCS_RTL {
   class sysc_sim_wrapper : public sc_module
   {
   public:
      // Interface Ports
      sc_core::sc_in<bool > clk;
      sc_core::sc_in<bool > rst;
      Connections::In<ac_int<8, true >, Connections::SYN_PORT > weight_in;
      Connections::In<ac_int<8, true >, Connections::SYN_PORT > act_in;
      Connections::In<ac_int<32, true >, Connections::SYN_PORT > accum_in;
      Connections::Out<ac_int<8, true >, Connections::SYN_PORT > act_out;
      Connections::Out<ac_int<32, true >, Connections::SYN_PORT > accum_out;
      Connections::Out<ac_int<8, true >, Connections::SYN_PORT > weight_out;
      
      // Data objects
      sc_signal< bool >                          ccs_rtl_SIG_clk;
      sc_signal< sc_logic >                      ccs_rtl_SIG_rst;
      sc_signal< sc_logic >                      ccs_rtl_SIG_weight_in_val;
      sc_signal< sc_logic >                      ccs_rtl_SIG_weight_in_rdy;
      sc_signal< sc_lv<8> >                      ccs_rtl_SIG_weight_in_msg;
      sc_signal< sc_logic >                      ccs_rtl_SIG_act_in_val;
      sc_signal< sc_logic >                      ccs_rtl_SIG_act_in_rdy;
      sc_signal< sc_lv<8> >                      ccs_rtl_SIG_act_in_msg;
      sc_signal< sc_logic >                      ccs_rtl_SIG_accum_in_val;
      sc_signal< sc_logic >                      ccs_rtl_SIG_accum_in_rdy;
      sc_signal< sc_lv<32> >                     ccs_rtl_SIG_accum_in_msg;
      sc_signal< sc_logic >                      ccs_rtl_SIG_act_out_val;
      sc_signal< sc_logic >                      ccs_rtl_SIG_act_out_rdy;
      sc_signal< sc_lv<8> >                      ccs_rtl_SIG_act_out_msg;
      sc_signal< sc_logic >                      ccs_rtl_SIG_accum_out_val;
      sc_signal< sc_logic >                      ccs_rtl_SIG_accum_out_rdy;
      sc_signal< sc_lv<32> >                     ccs_rtl_SIG_accum_out_msg;
      sc_signal< sc_logic >                      ccs_rtl_SIG_weight_out_val;
      sc_signal< sc_logic >                      ccs_rtl_SIG_weight_out_rdy;
      sc_signal< sc_lv<8> >                      ccs_rtl_SIG_weight_out_msg;
      
      // Named Objects
      
      // Module instance pointers
      HDL::ccs_DUT_wrapper ccs_rtl;
      
      // Declare processes (SC_METHOD and SC_THREAD)
      void update_proc();
      
      // Constructor
      SC_HAS_PROCESS(sysc_sim_wrapper);
      sysc_sim_wrapper(
         const sc_module_name& nm
      )
         : ccs_rtl(
            "ccs_rtl",
            TO_QUOTED_STRING(TOP_HDL_ENTITY)
         )
         , clk("clk")
         , rst("rst")
         , weight_in("weight_in")
         , act_in("act_in")
         , accum_in("accum_in")
         , act_out("act_out")
         , accum_out("accum_out")
         , weight_out("weight_out")
         , ccs_rtl_SIG_clk("ccs_rtl_SIG_clk")
         , ccs_rtl_SIG_rst("ccs_rtl_SIG_rst")
         , ccs_rtl_SIG_weight_in_val("ccs_rtl_SIG_weight_in_val")
         , ccs_rtl_SIG_weight_in_rdy("ccs_rtl_SIG_weight_in_rdy")
         , ccs_rtl_SIG_weight_in_msg("ccs_rtl_SIG_weight_in_msg")
         , ccs_rtl_SIG_act_in_val("ccs_rtl_SIG_act_in_val")
         , ccs_rtl_SIG_act_in_rdy("ccs_rtl_SIG_act_in_rdy")
         , ccs_rtl_SIG_act_in_msg("ccs_rtl_SIG_act_in_msg")
         , ccs_rtl_SIG_accum_in_val("ccs_rtl_SIG_accum_in_val")
         , ccs_rtl_SIG_accum_in_rdy("ccs_rtl_SIG_accum_in_rdy")
         , ccs_rtl_SIG_accum_in_msg("ccs_rtl_SIG_accum_in_msg")
         , ccs_rtl_SIG_act_out_val("ccs_rtl_SIG_act_out_val")
         , ccs_rtl_SIG_act_out_rdy("ccs_rtl_SIG_act_out_rdy")
         , ccs_rtl_SIG_act_out_msg("ccs_rtl_SIG_act_out_msg")
         , ccs_rtl_SIG_accum_out_val("ccs_rtl_SIG_accum_out_val")
         , ccs_rtl_SIG_accum_out_rdy("ccs_rtl_SIG_accum_out_rdy")
         , ccs_rtl_SIG_accum_out_msg("ccs_rtl_SIG_accum_out_msg")
         , ccs_rtl_SIG_weight_out_val("ccs_rtl_SIG_weight_out_val")
         , ccs_rtl_SIG_weight_out_rdy("ccs_rtl_SIG_weight_out_rdy")
         , ccs_rtl_SIG_weight_out_msg("ccs_rtl_SIG_weight_out_msg")
      {
         // Instantiate other modules
         ccs_rtl.clk(ccs_rtl_SIG_clk);
         ccs_rtl.rst(ccs_rtl_SIG_rst);
         ccs_rtl.weight_in_val(ccs_rtl_SIG_weight_in_val);
         ccs_rtl.weight_in_rdy(ccs_rtl_SIG_weight_in_rdy);
         ccs_rtl.weight_in_msg(ccs_rtl_SIG_weight_in_msg);
         ccs_rtl.act_in_val(ccs_rtl_SIG_act_in_val);
         ccs_rtl.act_in_rdy(ccs_rtl_SIG_act_in_rdy);
         ccs_rtl.act_in_msg(ccs_rtl_SIG_act_in_msg);
         ccs_rtl.accum_in_val(ccs_rtl_SIG_accum_in_val);
         ccs_rtl.accum_in_rdy(ccs_rtl_SIG_accum_in_rdy);
         ccs_rtl.accum_in_msg(ccs_rtl_SIG_accum_in_msg);
         ccs_rtl.act_out_val(ccs_rtl_SIG_act_out_val);
         ccs_rtl.act_out_rdy(ccs_rtl_SIG_act_out_rdy);
         ccs_rtl.act_out_msg(ccs_rtl_SIG_act_out_msg);
         ccs_rtl.accum_out_val(ccs_rtl_SIG_accum_out_val);
         ccs_rtl.accum_out_rdy(ccs_rtl_SIG_accum_out_rdy);
         ccs_rtl.accum_out_msg(ccs_rtl_SIG_accum_out_msg);
         ccs_rtl.weight_out_val(ccs_rtl_SIG_weight_out_val);
         ccs_rtl.weight_out_rdy(ccs_rtl_SIG_weight_out_rdy);
         ccs_rtl.weight_out_msg(ccs_rtl_SIG_weight_out_msg);
         
         
         // Register processes
         SC_METHOD(update_proc);
         sensitive  << clk << rst << weight_in.Connections::InBlocking_Ports_abs<ac_int<8, true > >::val << ccs_rtl_SIG_weight_in_rdy << weight_in.Connections::InBlocking<ac_int<8, true >, Connections::SYN_PORT >::msg << act_in.Connections::InBlocking_Ports_abs<ac_int<8, true > >::val << ccs_rtl_SIG_act_in_rdy << act_in.Connections::InBlocking<ac_int<8, true >, Connections::SYN_PORT >::msg << accum_in.Connections::InBlocking_Ports_abs<ac_int<32, true > >::val << ccs_rtl_SIG_accum_in_rdy << accum_in.Connections::InBlocking<ac_int<32, true >, Connections::SYN_PORT >::msg << ccs_rtl_SIG_act_out_val << act_out.Connections::OutBlocking_Ports_abs<ac_int<8, true > >::rdy << ccs_rtl_SIG_act_out_msg << ccs_rtl_SIG_accum_out_val << accum_out.Connections::OutBlocking_Ports_abs<ac_int<32, true > >::rdy << ccs_rtl_SIG_accum_out_msg << ccs_rtl_SIG_weight_out_val << weight_out.Connections::OutBlocking_Ports_abs<ac_int<8, true > >::rdy << ccs_rtl_SIG_weight_out_msg;
         // Other constructor statements
      }
      
      ~sysc_sim_wrapper()
      {
      }
      
      // C++ class functions
   };
} // end namespace CCS_RTL
// 
// -------------------------------------
// sysc_sim_wrapper
// Represents a new SC_MODULE having the same interface as the original model SysPE_rtl
// -------------------------------------
// 


// ---------------------------------------------------------------
// Process: SC_METHOD update_proc
// Static sensitivity: sensitive  << clk << rst << weight_in.Connections::InBlocking_Ports_abs<ac_int<8, true > >::val << ccs_rtl_SIG_weight_in_rdy << weight_in.Connections::InBlocking<ac_int<8, true >, Connections::SYN_PORT >::msg << act_in.Connections::InBlocking_Ports_abs<ac_int<8, true > >::val << ccs_rtl_SIG_act_in_rdy << act_in.Connections::InBlocking<ac_int<8, true >, Connections::SYN_PORT >::msg << accum_in.Connections::InBlocking_Ports_abs<ac_int<32, true > >::val << ccs_rtl_SIG_accum_in_rdy << accum_in.Connections::InBlocking<ac_int<32, true >, Connections::SYN_PORT >::msg << ccs_rtl_SIG_act_out_val << act_out.Connections::OutBlocking_Ports_abs<ac_int<8, true > >::rdy << ccs_rtl_SIG_act_out_msg << ccs_rtl_SIG_accum_out_val << accum_out.Connections::OutBlocking_Ports_abs<ac_int<32, true > >::rdy << ccs_rtl_SIG_accum_out_msg << ccs_rtl_SIG_weight_out_val << weight_out.Connections::OutBlocking_Ports_abs<ac_int<8, true > >::rdy << ccs_rtl_SIG_weight_out_msg;

void CCS_RTL::sysc_sim_wrapper::update_proc() {
   // none.sc_in field_key=clk:1f836d4d-da79-467d-b908-dee5b6e56ebc-333:clk:1f836d4d-da79-467d-b908-dee5b6e56ebc-333
   sc_logic t_1f836d4d_da79_467d_b908_dee5b6e56ebc_333; // NPS - LV to hold field
   ccs_rtl_SIG_clk.write(clk.read());
   
   // none.sc_in field_key=rst:1f836d4d-da79-467d-b908-dee5b6e56ebc-334:rst:1f836d4d-da79-467d-b908-dee5b6e56ebc-334
   sc_logic t_1f836d4d_da79_467d_b908_dee5b6e56ebc_334; // NPS - LV to hold field
   type_to_vector(rst.read(),1,t_1f836d4d_da79_467d_b908_dee5b6e56ebc_334); // read orig port and type convert
   ccs_rtl_SIG_rst.write(t_1f836d4d_da79_467d_b908_dee5b6e56ebc_334); // then write to RTL port
   
   // none.sc_in field_key=weight_in:1f836d4d-da79-467d-b908-dee5b6e56ebc-344:val:1f836d4d-da79-467d-b908-dee5b6e56ebc-373
   sc_logic t_1f836d4d_da79_467d_b908_dee5b6e56ebc_373; // NPS - LV to hold field
   type_to_vector(weight_in.Connections::InBlocking_Ports_abs<ac_int<8, true > >::val.read(),1,t_1f836d4d_da79_467d_b908_dee5b6e56ebc_373); // read orig port and type convert
   ccs_rtl_SIG_weight_in_val.write(t_1f836d4d_da79_467d_b908_dee5b6e56ebc_373); // then write to RTL port
   
   // none.sc_out field_key=weight_in:1f836d4d-da79-467d-b908-dee5b6e56ebc-344:rdy:1f836d4d-da79-467d-b908-dee5b6e56ebc-383
   bool d_1f836d4d_da79_467d_b908_dee5b6e56ebc_383;
   vector_to_type(ccs_rtl_SIG_weight_in_rdy.read(), 1, &d_1f836d4d_da79_467d_b908_dee5b6e56ebc_383);
   weight_in.Connections::InBlocking_Ports_abs<ac_int<8, true > >::rdy.write(d_1f836d4d_da79_467d_b908_dee5b6e56ebc_383);
   
   // none.sc_in field_key=weight_in:1f836d4d-da79-467d-b908-dee5b6e56ebc-344:msg:1f836d4d-da79-467d-b908-dee5b6e56ebc-393
   sc_lv< 8 > t_1f836d4d_da79_467d_b908_dee5b6e56ebc_393; // NPS - LV to hold field
   type_to_vector(weight_in.Connections::InBlocking<ac_int<8, true >, Connections::SYN_PORT >::msg.read(),8,t_1f836d4d_da79_467d_b908_dee5b6e56ebc_393); // read orig port and type convert
   ccs_rtl_SIG_weight_in_msg.write(t_1f836d4d_da79_467d_b908_dee5b6e56ebc_393); // then write to RTL port
   
   // none.sc_in field_key=act_in:1f836d4d-da79-467d-b908-dee5b6e56ebc-403:val:1f836d4d-da79-467d-b908-dee5b6e56ebc-426
   sc_logic t_1f836d4d_da79_467d_b908_dee5b6e56ebc_426; // NPS - LV to hold field
   type_to_vector(act_in.Connections::InBlocking_Ports_abs<ac_int<8, true > >::val.read(),1,t_1f836d4d_da79_467d_b908_dee5b6e56ebc_426); // read orig port and type convert
   ccs_rtl_SIG_act_in_val.write(t_1f836d4d_da79_467d_b908_dee5b6e56ebc_426); // then write to RTL port
   
   // none.sc_out field_key=act_in:1f836d4d-da79-467d-b908-dee5b6e56ebc-403:rdy:1f836d4d-da79-467d-b908-dee5b6e56ebc-436
   bool d_1f836d4d_da79_467d_b908_dee5b6e56ebc_436;
   vector_to_type(ccs_rtl_SIG_act_in_rdy.read(), 1, &d_1f836d4d_da79_467d_b908_dee5b6e56ebc_436);
   act_in.Connections::InBlocking_Ports_abs<ac_int<8, true > >::rdy.write(d_1f836d4d_da79_467d_b908_dee5b6e56ebc_436);
   
   // none.sc_in field_key=act_in:1f836d4d-da79-467d-b908-dee5b6e56ebc-403:msg:1f836d4d-da79-467d-b908-dee5b6e56ebc-446
   sc_lv< 8 > t_1f836d4d_da79_467d_b908_dee5b6e56ebc_446; // NPS - LV to hold field
   type_to_vector(act_in.Connections::InBlocking<ac_int<8, true >, Connections::SYN_PORT >::msg.read(),8,t_1f836d4d_da79_467d_b908_dee5b6e56ebc_446); // read orig port and type convert
   ccs_rtl_SIG_act_in_msg.write(t_1f836d4d_da79_467d_b908_dee5b6e56ebc_446); // then write to RTL port
   
   // none.sc_in field_key=accum_in:1f836d4d-da79-467d-b908-dee5b6e56ebc-456:val:1f836d4d-da79-467d-b908-dee5b6e56ebc-483
   sc_logic t_1f836d4d_da79_467d_b908_dee5b6e56ebc_483; // NPS - LV to hold field
   type_to_vector(accum_in.Connections::InBlocking_Ports_abs<ac_int<32, true > >::val.read(),1,t_1f836d4d_da79_467d_b908_dee5b6e56ebc_483); // read orig port and type convert
   ccs_rtl_SIG_accum_in_val.write(t_1f836d4d_da79_467d_b908_dee5b6e56ebc_483); // then write to RTL port
   
   // none.sc_out field_key=accum_in:1f836d4d-da79-467d-b908-dee5b6e56ebc-456:rdy:1f836d4d-da79-467d-b908-dee5b6e56ebc-493
   bool d_1f836d4d_da79_467d_b908_dee5b6e56ebc_493;
   vector_to_type(ccs_rtl_SIG_accum_in_rdy.read(), 1, &d_1f836d4d_da79_467d_b908_dee5b6e56ebc_493);
   accum_in.Connections::InBlocking_Ports_abs<ac_int<32, true > >::rdy.write(d_1f836d4d_da79_467d_b908_dee5b6e56ebc_493);
   
   // none.sc_in field_key=accum_in:1f836d4d-da79-467d-b908-dee5b6e56ebc-456:msg:1f836d4d-da79-467d-b908-dee5b6e56ebc-503
   sc_lv< 32 > t_1f836d4d_da79_467d_b908_dee5b6e56ebc_503; // NPS - LV to hold field
   type_to_vector(accum_in.Connections::InBlocking<ac_int<32, true >, Connections::SYN_PORT >::msg.read(),32,t_1f836d4d_da79_467d_b908_dee5b6e56ebc_503); // read orig port and type convert
   ccs_rtl_SIG_accum_in_msg.write(t_1f836d4d_da79_467d_b908_dee5b6e56ebc_503); // then write to RTL port
   
   // none.sc_out field_key=act_out:1f836d4d-da79-467d-b908-dee5b6e56ebc-518:val:1f836d4d-da79-467d-b908-dee5b6e56ebc-537
   bool d_1f836d4d_da79_467d_b908_dee5b6e56ebc_537;
   vector_to_type(ccs_rtl_SIG_act_out_val.read(), 1, &d_1f836d4d_da79_467d_b908_dee5b6e56ebc_537);
   act_out.Connections::OutBlocking_Ports_abs<ac_int<8, true > >::val.write(d_1f836d4d_da79_467d_b908_dee5b6e56ebc_537);
   
   // none.sc_in field_key=act_out:1f836d4d-da79-467d-b908-dee5b6e56ebc-518:rdy:1f836d4d-da79-467d-b908-dee5b6e56ebc-543
   sc_logic t_1f836d4d_da79_467d_b908_dee5b6e56ebc_543; // NPS - LV to hold field
   type_to_vector(act_out.Connections::OutBlocking_Ports_abs<ac_int<8, true > >::rdy.read(),1,t_1f836d4d_da79_467d_b908_dee5b6e56ebc_543); // read orig port and type convert
   ccs_rtl_SIG_act_out_rdy.write(t_1f836d4d_da79_467d_b908_dee5b6e56ebc_543); // then write to RTL port
   
   // none.sc_out field_key=act_out:1f836d4d-da79-467d-b908-dee5b6e56ebc-518:msg:1f836d4d-da79-467d-b908-dee5b6e56ebc-549
   sc_dt::sc_lv<8 > d_1f836d4d_da79_467d_b908_dee5b6e56ebc_549;
   vector_to_type(ccs_rtl_SIG_act_out_msg.read(), 8, &d_1f836d4d_da79_467d_b908_dee5b6e56ebc_549);
   act_out.Connections::OutBlocking<ac_int<8, true >, Connections::SYN_PORT >::msg.write(d_1f836d4d_da79_467d_b908_dee5b6e56ebc_549);
   
   // none.sc_out field_key=accum_out:1f836d4d-da79-467d-b908-dee5b6e56ebc-555:val:1f836d4d-da79-467d-b908-dee5b6e56ebc-570
   bool d_1f836d4d_da79_467d_b908_dee5b6e56ebc_570;
   vector_to_type(ccs_rtl_SIG_accum_out_val.read(), 1, &d_1f836d4d_da79_467d_b908_dee5b6e56ebc_570);
   accum_out.Connections::OutBlocking_Ports_abs<ac_int<32, true > >::val.write(d_1f836d4d_da79_467d_b908_dee5b6e56ebc_570);
   
   // none.sc_in field_key=accum_out:1f836d4d-da79-467d-b908-dee5b6e56ebc-555:rdy:1f836d4d-da79-467d-b908-dee5b6e56ebc-574
   sc_logic t_1f836d4d_da79_467d_b908_dee5b6e56ebc_574; // NPS - LV to hold field
   type_to_vector(accum_out.Connections::OutBlocking_Ports_abs<ac_int<32, true > >::rdy.read(),1,t_1f836d4d_da79_467d_b908_dee5b6e56ebc_574); // read orig port and type convert
   ccs_rtl_SIG_accum_out_rdy.write(t_1f836d4d_da79_467d_b908_dee5b6e56ebc_574); // then write to RTL port
   
   // none.sc_out field_key=accum_out:1f836d4d-da79-467d-b908-dee5b6e56ebc-555:msg:1f836d4d-da79-467d-b908-dee5b6e56ebc-578
   sc_dt::sc_lv<32 > d_1f836d4d_da79_467d_b908_dee5b6e56ebc_578;
   vector_to_type(ccs_rtl_SIG_accum_out_msg.read(), 32, &d_1f836d4d_da79_467d_b908_dee5b6e56ebc_578);
   accum_out.Connections::OutBlocking<ac_int<32, true >, Connections::SYN_PORT >::msg.write(d_1f836d4d_da79_467d_b908_dee5b6e56ebc_578);
   
   // none.sc_out field_key=weight_out:1f836d4d-da79-467d-b908-dee5b6e56ebc-582:val:1f836d4d-da79-467d-b908-dee5b6e56ebc-597
   bool d_1f836d4d_da79_467d_b908_dee5b6e56ebc_597;
   vector_to_type(ccs_rtl_SIG_weight_out_val.read(), 1, &d_1f836d4d_da79_467d_b908_dee5b6e56ebc_597);
   weight_out.Connections::OutBlocking_Ports_abs<ac_int<8, true > >::val.write(d_1f836d4d_da79_467d_b908_dee5b6e56ebc_597);
   
   // none.sc_in field_key=weight_out:1f836d4d-da79-467d-b908-dee5b6e56ebc-582:rdy:1f836d4d-da79-467d-b908-dee5b6e56ebc-603
   sc_logic t_1f836d4d_da79_467d_b908_dee5b6e56ebc_603; // NPS - LV to hold field
   type_to_vector(weight_out.Connections::OutBlocking_Ports_abs<ac_int<8, true > >::rdy.read(),1,t_1f836d4d_da79_467d_b908_dee5b6e56ebc_603); // read orig port and type convert
   ccs_rtl_SIG_weight_out_rdy.write(t_1f836d4d_da79_467d_b908_dee5b6e56ebc_603); // then write to RTL port
   
   // none.sc_out field_key=weight_out:1f836d4d-da79-467d-b908-dee5b6e56ebc-582:msg:1f836d4d-da79-467d-b908-dee5b6e56ebc-609
   sc_dt::sc_lv<8 > d_1f836d4d_da79_467d_b908_dee5b6e56ebc_609;
   vector_to_type(ccs_rtl_SIG_weight_out_msg.read(), 8, &d_1f836d4d_da79_467d_b908_dee5b6e56ebc_609);
   weight_out.Connections::OutBlocking<ac_int<8, true >, Connections::SYN_PORT >::msg.write(d_1f836d4d_da79_467d_b908_dee5b6e56ebc_609);
   
}

// Include original testbench file(s)
#include "/home/billyk/cs148/hls/lab3/SysPE/../../../cmod/lab3/SysPE/testbench.cpp"
